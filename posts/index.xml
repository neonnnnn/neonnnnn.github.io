<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 積んでるゲームのサントラを聴く</title><link>https://neonnnnn.github.io/posts/</link><description>Recent content in Posts on 積んでるゲームのサントラを聴く</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>Kyohei Atarashi</copyright><lastBuildDate>Sat, 16 Oct 2021 03:00:00 +0900</lastBuildDate><atom:link href="https://neonnnnn.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>LaTeX Test</title><link>https://neonnnnn.github.io/posts/latex-test/</link><pubDate>Sat, 16 Oct 2021 03:00:00 +0900</pubDate><guid>https://neonnnnn.github.io/posts/latex-test/</guid><description>はじめに Github Pagesを用いて、テックっぽいことや機械学習とその周辺分野に関するアウトプットを行うことにした。 Github Pagesを選んだのは、自由度と手軽さのバランスが良さそうだったからなわけだが、とはいえ自分でゴリゴリCSSやらHTMLやらを書くのは気乗りしない（しセンスもない）ので、Hugoを使って整備をすることにした。 HugoはGo言語で書かれた静的サイトジェネレータで、高速なのが売りっぽい。 テーマも様々提供されていて、どれもこれも質が高い。 パーッと眺めてみて、なんとなくCactusというテーマが気に入りそれを利用することにした。 Github Pages及びHugoの導入自体は非常に簡単で、公式のquick-startとhosting-on-githubに従えば良い。
MathJaxの導入 記事を書くにあたって、数式の記載は避けられない。 このような場合、MathJaxが定番だと思っていたが、ちょっと調べて見た感じだと、どうやらKaTeXというのが最近は良いらしい。 が、CactusでMathJaxが標準でサポートされているので、今回はそのままMathJaxを使うことにする。 速度に不満が出てきたり、Hugoに興味がでた場合にKaTeXへの以降を考えたい。
CactusでのMathJaxの利用は簡単で、front matterにmathjax: trueと記載すれば良い。 以下、簡単なテスト。
inline数式 $で囲めば良い。 $a$, $\boldsymbol{a}$, $\lVert \boldsymbol{x}^\top \rVert^2$ $\sum_{i=1}^N x_i$
別行立て $$で囲めば良い。 $$ \exp (a_i) + \log \left [\frac{b_i}{c_i} + d_i \right] + \lambda $$
alignも使える。改行はバックスラッシュ6つで行う。 \begin{align} \log abc &amp;amp;= \log ab + \log c \\\ &amp;amp;=\log a + \log b + \log c \end{align} 上の数式は以下に対応する。
\begin{align} \log abc &amp;amp;= \log ab + \log c \\\\\\ &amp;amp;=\log a + \log b + \log c \end{align}</description></item><item><title>Code Block Test</title><link>https://neonnnnn.github.io/posts/code-block-test/</link><pubDate>Sun, 27 Jun 2021 09:00:00 +0000</pubDate><guid>https://neonnnnn.github.io/posts/code-block-test/</guid><description>String
Using indents:
text text text Fenced code block:
text text &amp;lt;tag&amp;gt; Fenced code block with language (lineNumbersInTable = false):
1// JavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJavaJava 2public final class String 3 implements java.io.Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence 4{ 5 /** The value is used for character storage. */ 6 private final char value[]; 7 8 /** The offset is the first index of the storage that is used. */ 9 private final int offset; 10 11 /** The count is the number of characters in the String.</description></item></channel></rss>